using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Management;
using System.ServiceProcess;
using System.Text.RegularExpressions;

namespace wsetc
{
    class Program
    {
        static void Main(string[] args)
        {
            if (args.Length > 0 && args[0].Contains(".reg"))
            {
                bool includeDevices = args.Any("--devices".Contains);
                WriteFile(Environment.ExpandEnvironmentVariables(args[0]), includeDevices);
            }
            else
            {
                Console.WriteLine("");
                Console.WriteLine("Windows Services Export Tool v1.0");
                Console.WriteLine("Copyright (C) 2021 soulstace");
                Console.WriteLine("github.com/soulstace/wsetc");
                Console.WriteLine("");
                Console.WriteLine("Back up your current Windows services configuration in an easy-to-read/modify/restore .reg format");
                Console.WriteLine("");
                Console.WriteLine("Usage: wsetc services.reg --devices");
            }
        }

        static void WriteFile(string filename, bool includeDevices)
        {
            if (File.Exists(filename))
            {
                Console.WriteLine($"{filename} already exists. Use a different filename.");
                return;
            }

            Console.WriteLine($"Exporting services into file {filename}");

            FileVersionInfo krnl = FileVersionInfo.GetVersionInfo(Path.Combine(Environment.SystemDirectory, "ntoskrnl.exe"));
            ServiceController[] services = includeDevices ?
                    ServiceController.GetServices().Concat(ServiceController.GetDevices()).ToArray() :
                    ServiceController.GetServices();

            using (StreamWriter sw = File.CreateText(filename))
            {
                sw.WriteLine("Windows Registry Editor Version 5.00");
                sw.WriteLine("");
                sw.WriteLine("; Generated by Windows Services Export Tool");
                sw.WriteLine("; {0:U} UTC", DateTime.UtcNow);
                sw.WriteLine("; Author: soulstace");
                sw.WriteLine("");
                //sw.WriteLine("; OS Version: " + Environment.OSVersion.VersionString);
                sw.WriteLine($"; OS/Kernel Version: {krnl.FileVersion}"); /* new method for windows 10 */
                sw.WriteLine($"; Total services: {services.Length}");
                sw.WriteLine("");
                sw.WriteLine("; DWORD values and their meanings;");
                sw.WriteLine("; 0 = Boot");
                sw.WriteLine("; 1 = System");
                sw.WriteLine("; 2 = Automatic");
                sw.WriteLine("; 3 = Manual");
                sw.WriteLine("; 4 = Disabled");
                sw.WriteLine("");

                int count = 0;
                foreach (ServiceController sc in services)
                {
                    if (!string.IsNullOrEmpty(sc.ServiceName))
                    {
                        string serviceName = sc.ServiceName;
                        string dispName = sc.DisplayName;
                        string svcdesc = "";
                        string pattern = @"_[0-9a-fA-F]{5}"; /* find random services using pattern to match _ followed by a 5-character hex string */
                        
                        if (serviceName.Contains("_"))
                        {
                            if (Regex.IsMatch(serviceName, pattern))
                            {
                                serviceName = serviceName.Split('_').ElementAt(0);
                                dispName = dispName.Split('_').ElementAt(0);
                            }
                        }

                        /* service description obtained using ServiceControllerEx by Mohamed Sharaf */
                        string mgpth = $"Win32_Service.Name='{serviceName}'";
                        using (ManagementObject mgobj = new ManagementObject(new ManagementPath(mgpth)))
                        {
                            svcdesc = (mgobj["Description"] != null) ? mgobj["Description"].ToString() : "";
                        }

                        sw.WriteLine($"; {dispName}");
                        if (!string.IsNullOrEmpty(svcdesc))
                            sw.WriteLine($"; {svcdesc}");
                        sw.WriteLine($@"[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\{serviceName}]");

                        using (RegistryKey rkSvc = Registry.LocalMachine.OpenSubKey($@"SYSTEM\CurrentControlSet\Services\{serviceName}",
                            RegistryKeyPermissionCheck.ReadSubTree, System.Security.AccessControl.RegistryRights.ReadKey))
                        {
                            object startVal = rkSvc.GetValue("Start", null);
                            if (startVal != null)
                            {
                                sw.WriteLine($"\"Start\"=dword:{(int)startVal}");

                                if ((int)rkSvc.GetValue("DelayedAutoStart", 0) == 1)
                                    sw.WriteLine("\"DelayedAutoStart\"=dword:1");
                            }
                            else
                            {
                                sw.WriteLine("; \"Start\" value is null");
                            }
                            sw.WriteLine("");
                        }
                        Console.Write("\r{0}/{1}", ++count, services.Length);
                    }
                }
            }
        }
    }
}
